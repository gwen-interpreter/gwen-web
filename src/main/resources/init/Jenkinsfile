pipeline {
  agent {
      // replace with an agent that has docker installed
      label 'docker-agent'
  }
  parameters { 
    choice(name: 'env', choices: ['dev', 'test', 'staging', 'prod'], description: 'Target environment')
    choice(name: 'process', choices: [''], description: 'Target process')
    choice(name: 'browser', choices: ['chrome', 'firefox', 'edge'], description: 'Target web browser')
    booleanParam(name: 'dry_run', defaultValue: false, description: 'Validate without executing')
    booleanParam(name: 'parallel', defaultValue: false, description: 'Enable parallel batch execution across cores')
    choice(name: 'threads', choices: ['auto', '2', '4', '8', '12', '16', '24', '32', '48', '64'], description: 'Number of parallel threads (auto = one thread per available core)')
    booleanParam(name: 'headless', defaultValue: false, description: 'Enable headless browser') 
    booleanParam(name: 'video', defaultValue: false, description: 'Enable video recording') 
  }
  environment {
    GWEN_ENV = "${params.env}"
    GWEN_PROFILE = "${params.process}"
    GWEN_BROWSER = "${params.browser}"
    GWEN_DRY_RUN = "${params.dry_run}"
    GWEN_PARALLEL = "${params.parallel}"
    GWEN_THREADS = "${params.threads}"
    GWEN_HEADLESS = "${params.headless}"
    GWEN_VIDEO = "${params.video}"
  }
  stages {
    stage("Prepare") {
      steps {
        script {
          // Clean up docker
          sh 'docker rm -f $(docker ps -a -q) || true'
          sh 'docker volume rm -f $(docker volume -q) || true'
          // Prepare output dir
          sh 'rm -rf ${gwen.initDir}${slash}output/**'
          sh 'mkdir -p ${gwen.initDir}${slash}output'
        }
      }
    }
    stage("Gwen") {
      steps {
        script {
          try {
            // Spin up environment and execute Gwen in docker
            sh "docker-compose${docker.compose.options} -p ${env.BUILD_TAG.toLowerCase()} run gwen"
            if (!fileExists('${gwen.initDir}${slash}output/reports/html/index.html')) {
              error 'Evaluation report not generated'
            }
          } catch(err) {
            if (fileExists('${gwen.initDir}${slash}output/reports/html/index.html')) {
              unstable 'Gwen completed with failure(s) reported.'
            } else {
              error "Gwen failed to execute or complete: ${err.getMessage()}"
            }
          }
        }
      }
      post {
        always {
          sh "docker-compose${docker.compose.options} -p ${env.BUILD_TAG.toLowerCase()} down -v || true"
          publishHTML(target: [
                        allowMissing          : true,
                        alwaysLinkToLastBuild : false,
                        keepAll               : true,
                        reportDir             : '${gwen.initDir}${slash}output/reports/html',
                        reportFiles           : 'index.html',
                        reportName            : "Gwen-Report"
          ])
        }
      }
    }
  }
  post {
    always {
      script {
        sh 'docker rm -f $(docker ps -a -q) || true'
        sh 'docker volume rm -f $(docker volume -q) || true'
      }
    }
    failure {
      script {
        // something went wrong, raise alert here
      }
    }
  }
}
