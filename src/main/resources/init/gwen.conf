#
# Common Gwen Settings
# --------------------
# 
# Configure all your common Gwen settings here.
# 
# Configure all your browser level settings in the browser folder.
# Configure all your environment level settings in the envs folder.
#
# 
# For more detailed information about each setting see:
# - https://gweninterpreter.org/docs/settings#settings-reference
#
# Format: HOCON (Human-Optimized Config Object Notation superset of JSON)
# - See: https://github.com/lightbend/config/blob/master/HOCON.md
#

gwen {
  baseDir = "${gwen.initDir}"
  outDir = "${gwen.baseDir}/output"
  target {
    browser = "chrome"            # chrome|firefox|safari|edge
    env = "test"                  # local|dev|test|staging|prod|..
  }
  assertion {
    mode = "hard"                 # hard|soft|sustained
  }
  auto {
    bind {
      tableData {
        outline {
          examples = true
        }
      }
    }
    trim {
      data {
        csv = false
        json = false
      }
    }
  }
  behavior {
    rules = "strict"              # strict|lenient
  }
  console {
    log {
      colors = true
      depth = 1                   # "infinity" to log all depths
      stepDefs = true
    }
    repl {
      autoSuggestions = true
      tabCompletion = true
    }
  }
  dryRun {
    limit {
      tableData {
        outline {
          examples {
            records = "infinity"  # "infinity" to include all records in dry run
          }
        }
      }
    }
  }
  error {
    messages {
      inline {
        locators = false
      }
    }
  }
  feature {
    dialect = "en"
    failfast {
      enabled = true
      exit = false
    }
    mode = "declarative"          # declarative|imperative
  }
  input {
    data {
      maskFields = [
      ]
      readOnly = true
    }
  }
  launch {                        # Launch options
    options {                     # See: https://gweninterpreter.org/docs/settings#launch-settings
      batch  = false
      features = [
      ]
      format = [
        "html"
        # "results"
        # "junit"
        # "json"
        # "none"
      ]
      dryRun = false
      inputData = ""
      meta = [
        "${gwen.baseDir}/meta"
      ]
      parallel = false
      report = ${gwen.outDir}/reports
      tags = [
        # "@tag1"
        # "~@tag2"
        # ..
      ]
      verbose = false
    }
  }
  logLevel {
    deprecations = "warn"         # warn|error|none
  }
  mask {
    char = "*"
  }
  parallel {
    maxThreads = auto             # auto|number|percentage (auto = all available cores)
  }
  rampup {
    interval {
      seconds = 0                 # 0 = non staggerred parallel execution
    }
  }
  report {
    attach {
      functions = true
    }
    overwrite = false
    results {
      fields {
        feature {
          status = [
            { field = "EVAL_STATUS", ref = "gwen.feature.eval.status.keyword.upperCased" }
            { field = "EVAL_STARTED", ref = "gwen.feature.eval.started" }
            { field = "EVAL_FINISHED", ref = "gwen.feature.eval.finished" }
          ]
          details = [
            { field = "FEATURE_FILE", ref = "gwen.feature.file.path" }
            { field = "FEATURE_NAME", ref = "gwen.feature.displayName" }
          ]
          duration = [
            { field = "EVAL_DURATION", ref = "gwen.feature.eval.duration" }
          ]
          message = [
            { field = "EVAL_MESSAGE", ref = "gwen.feature.eval.status.message" }
          ]
        }
        scenario {
          status = [
            { field = "EVAL_STATUS", ref = "gwen.scenario.eval.status.keyword.upperCased" }
            { field = "EVAL_STARTED", ref = "gwen.scenario.eval.started" }
            { field = "EVAL_FINISHED", ref = "gwen.scenario.eval.finished" }
          ]
          details = [
            ${gwen.report.results.fields.feature.details}
            { field = "SCENARIO_NAME", ref = "gwen.scenario.displayName" }
          ]
          duration = [
            { field = "EVAL_DURATION", ref = "gwen.scenario.eval.duration" }
          ]
          message = [
            { field = "EVAL_MESSAGE", ref = "gwen.scenario.eval.status.message" }
          ]
        }
        input {
            data = [
            # Use this if input CSV file will always contain a header row (otherwise list fields explicitly here instead)
            { field = "*", ref = "$<gwen.options.dataFile>" }
          ]
        }
      }
      files {
        feature {
          passed {
            file = "feature-results-PASSED.csv"
            scope = "Feature"
            status = "Passed"
            fields = [ 
              ${gwen.report.results.fields.feature.status}
              ${gwen.report.results.fields.feature.details}
              ${gwen.report.results.fields.feature.duration}
              ${gwen.report.results.fields.input.data}
            ]
          }
          failed {
            file = "feature-results-FAILED.csv"
            scope = "Feature"
            status = "Failed"
            fields = [ 
              ${gwen.report.results.fields.feature.status}
              ${gwen.report.results.fields.feature.details}
              ${gwen.report.results.fields.feature.duration}
              ${gwen.report.results.fields.input.data}
              ${gwen.report.results.fields.feature.message}
            ]
          }
          all {
            file = "feature-results-ALL.csv"
            scope = "Feature"
            fields = [ 
              ${gwen.report.results.fields.feature.status}
              ${gwen.report.results.fields.feature.details}
              ${gwen.report.results.fields.feature.duration}
              ${gwen.report.results.fields.input.data}
              ${gwen.report.results.fields.feature.message}
            ]
          }
        }
        scenario {
          passed {
            file = "scenario-results-PASSED.csv"
            scope = "Scenario"
            status = "Passed"
            fields = [
              ${gwen.report.results.fields.scenario.status}
              ${gwen.report.results.fields.scenario.details}
              ${gwen.report.results.fields.scenario.duration}
              ${gwen.report.results.fields.input.data}
            ]
          }
          failed {
            file = "scenario-results-FAILED.csv"
            scope = "Scenario"
            status = "Failed"
            fields = [
              ${gwen.report.results.fields.scenario.status}
              ${gwen.report.results.fields.scenario.details}
              ${gwen.report.results.fields.scenario.duration}
              ${gwen.report.results.fields.input.data}
              ${gwen.report.results.fields.scenario.message}
            ]
          }
          all {
            file = "scenario-results-ALL.csv"
            scope = "Scenario"
            fields = [
              ${gwen.report.results.fields.scenario.status}
              ${gwen.report.results.fields.scenario.details}
              ${gwen.report.results.fields.scenario.duration}
              ${gwen.report.results.fields.input.data}
              ${gwen.report.results.fields.scenario.message}
            ]
          }
        }
      }
    }
    slideshow {
      create = false
      framespersecond = 4
    }
    stepDef {
      indent {
        pixels = 20
      }
    }
    suppress {
      meta = true
    }
  }
  state {
    level = "feature"             # feature|scenario
  }
  video {
    dir = ${user.home}/videos
    timeoutSecs = 10
  }
  web {
    assertions {
      delayMillisecs = 200
      maxStrikes = auto           # number|infinity|auto (infinity = unlimited attempts until timeout)
    }
    authorize {
      plugins = false
    }
    browser {
      headless = false
      # size = ""                 # <width>x<height> eg: 1200x800
    }
    capture {
      screenshots {
        enabled = false
        duplicates = false
        highlighting = false
      }
    }
    highlight {
      style = "background: yellow; border: 1px solid gold;"
    }
    implicit {
      element {
        focus = true
        moveTo = false
      }
    }
    locator {
      wait {
        seconds = ${gwen.web.wait.seconds}
      }
    }
    maximize = false
    sendKeys {
      clearFirst = false
      clickFirst = false
    }
    session {
      expired {
        autoReplace = true
      }
    }
    suppress {
      images = false
    }
    throttle {
      msecs = 100
    }
    # useragent = ""
    wait {
      seconds = 10
    }
  }
}
